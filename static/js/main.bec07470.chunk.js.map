{"version":3,"sources":["Board.tsx","firebaseConfig.tsx","AllBoards.tsx","Checkbox.tsx","CreateBoardForm.tsx","Home.tsx","serviceWorker.ts","index.tsx"],"names":["Board","_ref","board","small","react_default","a","createElement","className","map","character","index","key","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","AllBoards","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getAllBoards","ref","once","then","boards","val","setState","allBoards","values","state","inherits","createClass","value","onClick","togglePage","boardObject","name","Board_Board","Component","Checkbox","type","label","checked","onChange","disabled","CreateBoardForm","getCharacters","characters","baseCharacterNames","filter","required","optionalCharacterNames","handleCheckboxChange","event","chosenCharacterNames","toConsumableArray","target","push","remove","shuffleBoard","shuffle","concat","showBoard","handleNameChange","boardName","saveBoard","_this$state","set","_this2","buttonDisabled","length","Checkbox_Checkbox","Fragment","placeholder","Home","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","showForm","toggleShowForm","AllBoards_AllBoards","CreateBoardForm_CreateBoardForm","Boolean","window","location","hostname","match","ReactDOM","render","Home_Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bec07470.chunk.js","sourcesContent":["import React, { FC } from 'react'\n\nexport const Board: FC<{ board: string[], small?: boolean }> = ({ board, small }) => {\n  return (\n    <div className={small ? 'small board' : 'board'}>\n      {board.map((character: string, index: number): JSX.Element =>\n        <div className='board-square' key={index}>{character}</div>\n      )}\n    </div>\n  )\n}\n\n","import * as firebase from \"firebase/app\"\nimport \"firebase/database\"\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD7LRHKgO38uvq3rhHY9AyWkOEK-HFCBdI\",\n  authDomain: \"got-bingo.firebaseapp.com\",\n  databaseURL: \"https://got-bingo.firebaseio.com\",\n  projectId: \"got-bingo\",\n  storageBucket: \"got-bingo.appspot.com\",\n  messagingSenderId: \"470065775381\"\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport const database = firebase.database()\n\n","import React, { Component } from 'react'\nimport { Board } from './Board'\nimport { database } from './firebaseConfig'\n\ntype boardObjectType = {\n  name: string,\n  board: string[]\n}\n\nexport class AllBoards extends Component<{ togglePage: any }, { allBoards: boardObjectType[] }> {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      allBoards: [] as boardObjectType[]\n    }\n\n    this.getAllBoards()\n  }\n\n  getAllBoards = (): void => {\n    database.ref('/boards').once('value').then(boards => {\n      if (boards.val()) {\n        this.setState({ allBoards: Object.values(boards.val()) })\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className='all-boards'>\n        <div className='create-new'>\n          <button onClick={this.props.togglePage}>Create New</button>\n        </div>\n        <h1 className='title'>All Boards</h1>\n        <div className='board-grid'>\n          {this.state.allBoards.map((boardObject: boardObjectType): JSX.Element =>\n            <div className='board-with-name' key={boardObject.name}>\n              <h2>{boardObject.name}</h2>\n              <Board board={boardObject.board} small={true} />\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { FC } from 'react'\n\nexport const Checkbox: FC<CheckboxProps> = (props) => {\n  return (\n    <label className='checkbox-label'>\n      <input\n        type='checkbox'\n        name={ props.label }\n        checked={ props.checked }\n        onChange={ props.onChange }\n        disabled={ props.disabled }\n      />\n      { props.label }\n    </label>\n  )\n}\n\ntype CheckboxProps = {\n  checked?: boolean,\n  onChange?: any,\n  label: string,\n  key: string,\n  disabled?: boolean\n}\n","import React, { Component, FormEvent } from 'react'\nimport { remove, shuffle } from 'lodash'\nimport { Board } from './Board'\nimport { Checkbox } from './Checkbox'\nimport { database } from './firebaseConfig'\n\ntype PropsType = { togglePage: any }\n\ntype StateType = {\n  chosenCharacterNames: string[],\n  showBoard: boolean,\n  board: string[],\n  boardName: string,\n  baseCharacterNames: string[],\n  optionalCharacterNames: string[]\n}\n\nexport class CreateBoardForm extends Component<PropsType, StateType> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      chosenCharacterNames: [] as string[],\n      showBoard: false,\n      board: [] as string[],\n      boardName: '',\n      baseCharacterNames: [] as string[],\n      optionalCharacterNames: [] as string[]\n    }\n\n    this.getCharacters()\n  }\n\n  getCharacters = (): void => {\n    database.ref('/characters').once('value').then(characters => {\n      const baseCharacterNames: string[] = characters.val().filter(character => character.required).map(character => character.name)\n      const optionalCharacterNames: string[] = characters.val().filter(character => !character.required).map(character => character.name)\n\n      this.setState({ baseCharacterNames, optionalCharacterNames })\n    })\n  }\n\n  handleCheckboxChange = (event: FormEvent): void => {\n    let chosenCharacterNames = [...this.state.chosenCharacterNames]\n    const target = event.target as HTMLInputElement\n\n    if (target.checked) {\n      chosenCharacterNames.push(target.name)\n    } else {\n      remove(chosenCharacterNames, (character: string): boolean => character === target.name)\n    }\n\n    this.setState({ chosenCharacterNames })\n  }\n\n  shuffleBoard = (): void => {\n    const board: string[] = shuffle(this.state.baseCharacterNames.concat(this.state.chosenCharacterNames))\n    this.setState({ showBoard: true, board })\n  }\n\n  handleNameChange = (event: FormEvent): void => {\n    const target = event.target as HTMLInputElement\n    this.setState({ boardName: target.value })\n  }\n\n  saveBoard = (): void => {\n    const { boardName, board } = this.state\n    const newBoardRef = database.ref('/boards').push()\n\n    newBoardRef.set({\n      name: boardName,\n      board\n    })\n\n    this.props.togglePage()\n  }\n\n  render() {\n    const buttonDisabled: boolean = this.state.chosenCharacterNames.length + this.state.baseCharacterNames.length !== 25\n\n    return (\n      <div className='create-board-form'>\n        <div className='character-selection'>\n          <div>\n            <h2>Base characters:</h2>\n            {this.state.baseCharacterNames.map((character: string): JSX.Element =>\n              <Checkbox\n                key={character}\n                label={character}\n                checked\n                disabled\n              />\n            )}\n          </div>\n          <div>\n            <h2>Select 5 additional characters:</h2>\n            {this.state.optionalCharacterNames.map((character: string): JSX.Element =>\n              <Checkbox\n                key={character}\n                label={character}\n                onChange={this.handleCheckboxChange}\n              />\n            )}\n            <button disabled={buttonDisabled} onClick={this.shuffleBoard}>Generate or shuffle your board</button>\n          </div>\n        </div>\n        <div className='board-generation'>\n          <div className='close-icon' onClick={this.props.togglePage}>&#10005;</div>\n          {this.state.showBoard &&\n            <>\n              <Board board={this.state.board} />\n              <div className='save-board'>\n                <input\n                  type='text'\n                  name='boardName'\n                  value={this.state.boardName}\n                  placeholder='Enter your name'\n                  onChange={this.handleNameChange}\n                />\n                <button onClick={this.saveBoard}>Save your board!</button>\n              </div>\n            </>\n          }\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { AllBoards } from './AllBoards'\nimport { CreateBoardForm } from './CreateBoardForm'\n\nexport class Home extends Component<{}, { showForm: boolean }> {\n  state = { showForm: false }\n\n  toggleShowForm = (): void => this.setState({ showForm: !this.state.showForm })\n\n  render() {\n    return (\n      <>\n        {!this.state.showForm && <AllBoards togglePage={this.toggleShowForm} /> }\n        {this.state.showForm && <CreateBoardForm togglePage={this.toggleShowForm} /> }\n      </>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport { Home } from './Home'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Home />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}