{"version":3,"sources":["firebaseConfig.tsx","Board.tsx","AllBoards.tsx","Checkbox.tsx","CreateBoardForm.tsx","Home.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","Board","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getCharacterInfo","ref","once","then","characters","setState","characterInfo","val","state","inherits","createClass","key","value","_this2","react_default","a","createElement","className","small","board","map","character","alive","Component","AllBoards","getAllBoards","boards","allBoards","values","onClick","togglePage","boardObject","name","Board_Board","Checkbox","type","label","checked","onChange","disabled","CreateBoardForm","getCharacters","characterNames","keys","reduce","acc","characterName","required","baseCharacterNames","push","optionalCharacterNames","handleCheckboxChange","event","chosenCharacterNames","toConsumableArray","target","remove","shuffleBoard","shuffle","concat","showBoard","handleNameChange","boardName","saveBoard","_this$state","set","buttonDisabled","length","Checkbox_Checkbox","Fragment","placeholder","Home","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","showForm","toggleShowForm","AllBoards_AllBoards","CreateBoardForm_CreateBoardForm","Boolean","window","location","hostname","match","ReactDOM","render","Home_Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6785f85.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\"\nimport \"firebase/database\"\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD7LRHKgO38uvq3rhHY9AyWkOEK-HFCBdI\",\n  authDomain: \"got-bingo.firebaseapp.com\",\n  databaseURL: \"https://got-bingo.firebaseio.com\",\n  projectId: \"got-bingo\",\n  storageBucket: \"got-bingo.appspot.com\",\n  messagingSenderId: \"470065775381\"\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport const database = firebase.database()\n\n","import React, { Component } from 'react'\nimport { database } from './firebaseConfig'\n\nexport class Board extends Component<{ board: string[], small?: boolean }, { characterInfo: any }> {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      characterInfo: {}\n    }\n\n    this.getCharacterInfo()\n  }\n\n  getCharacterInfo = () => {\n    database.ref('/allCharacters').once('value').then(characters => this.setState({ characterInfo: characters.val() }))\n  }\n\n  render() {\n    return (\n      <div className={this.props.small ? 'small board' : 'board'}>\n        {this.props.board.map((character: string): JSX.Element =>\n          <div\n            className={this.state.characterInfo[character] && !this.state.characterInfo[character].alive ? 'board-square dead' : 'board-square'}\n            key={character}>\n            {character}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\n","import React, { Component } from 'react'\nimport { Board } from './Board'\nimport { database } from './firebaseConfig'\n\ntype boardObjectType = {\n  name: string,\n  board: string[]\n}\n\nexport class AllBoards extends Component<{ togglePage: any }, { allBoards: boardObjectType[] }> {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      allBoards: [] as boardObjectType[]\n    }\n\n    this.getAllBoards()\n  }\n\n  getAllBoards = (): void => {\n    database.ref('/boards').once('value').then(boards => {\n      if (boards.val()) {\n        this.setState({ allBoards: Object.values(boards.val()) })\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className='all-boards'>\n        <div className='create-new'>\n          <button onClick={this.props.togglePage}>Create New</button>\n        </div>\n        <h1 className='title'>All Boards</h1>\n        <div className='board-grid'>\n          {this.state.allBoards.map((boardObject: boardObjectType): JSX.Element =>\n            <div className='board-with-name' key={boardObject.name}>\n              <h2>{boardObject.name}</h2>\n              <Board board={boardObject.board} small={true} />\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { FC } from 'react'\n\nexport const Checkbox: FC<CheckboxProps> = (props) => {\n  return (\n    <label className='checkbox-label'>\n      <input\n        type='checkbox'\n        name={ props.label }\n        checked={ props.checked }\n        onChange={ props.onChange }\n        disabled={ props.disabled }\n      />\n      { props.label }\n    </label>\n  )\n}\n\ntype CheckboxProps = {\n  checked?: boolean,\n  onChange?: any,\n  label: string,\n  key: string,\n  disabled?: boolean\n}\n","import React, { Component, FormEvent } from 'react'\nimport { remove, shuffle } from 'lodash'\nimport { Board } from './Board'\nimport { Checkbox } from './Checkbox'\nimport { database } from './firebaseConfig'\n\ntype PropsType = { togglePage: any }\n\ntype StateType = {\n  chosenCharacterNames: string[],\n  showBoard: boolean,\n  board: string[],\n  boardName: string,\n  baseCharacterNames: string[],\n  optionalCharacterNames: string[]\n}\n\nexport class CreateBoardForm extends Component<PropsType, StateType> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      chosenCharacterNames: [] as string[],\n      showBoard: false,\n      board: [] as string[],\n      boardName: '',\n      baseCharacterNames: [] as string[],\n      optionalCharacterNames: [] as string[]\n    }\n\n    this.getCharacters()\n  }\n\n  getCharacters = (): void => {\n    database.ref('/allCharacters').once('value').then(characters => {\n      type characterNamesType = {\n        baseCharacterNames: string[],\n        optionalCharacterNames: string[]\n      }\n\n      const startingAcc: characterNamesType = {\n        baseCharacterNames: [],\n        optionalCharacterNames: []\n      }\n\n      const characterNames: characterNamesType = Object.keys(characters.val()).reduce((acc, characterName) => {\n        if (characters.val()[characterName].required) {\n          acc.baseCharacterNames.push(characterName)\n        } else {\n          acc.optionalCharacterNames.push(characterName)\n        }\n        return acc\n      }, startingAcc)\n\n      this.setState({\n        baseCharacterNames: characterNames.baseCharacterNames,\n        optionalCharacterNames: characterNames.optionalCharacterNames\n      })\n    })\n  }\n\n  handleCheckboxChange = (event: FormEvent): void => {\n    let chosenCharacterNames = [...this.state.chosenCharacterNames]\n    const target = event.target as HTMLInputElement\n\n    if (target.checked) {\n      chosenCharacterNames.push(target.name)\n    } else {\n      remove(chosenCharacterNames, (character: string): boolean => character === target.name)\n    }\n\n    this.setState({ chosenCharacterNames })\n  }\n\n  shuffleBoard = (): void => {\n    const board: string[] = shuffle(this.state.baseCharacterNames.concat(this.state.chosenCharacterNames))\n    this.setState({ showBoard: true, board })\n  }\n\n  handleNameChange = (event: FormEvent): void => {\n    const target = event.target as HTMLInputElement\n    this.setState({ boardName: target.value })\n  }\n\n  saveBoard = (): void => {\n    const { boardName, board } = this.state\n    const newBoardRef = database.ref('/boards').push()\n\n    newBoardRef.set({\n      name: boardName,\n      board\n    })\n\n    this.props.togglePage()\n  }\n\n  render() {\n    const buttonDisabled: boolean = this.state.chosenCharacterNames.length + this.state.baseCharacterNames.length !== 25\n\n    return (\n      <div className='create-board-form'>\n        <div className='character-selection'>\n          <div>\n            <h2>Base characters:</h2>\n            {this.state.baseCharacterNames.map((character: string): JSX.Element =>\n              <Checkbox\n                key={character}\n                label={character}\n                checked\n                disabled\n              />\n            )}\n          </div>\n          <div>\n            <h2>Select 5 additional characters:</h2>\n            {this.state.optionalCharacterNames.map((character: string): JSX.Element =>\n              <Checkbox\n                key={character}\n                label={character}\n                onChange={this.handleCheckboxChange}\n              />\n            )}\n            <button disabled={buttonDisabled} onClick={this.shuffleBoard}>Generate or shuffle your board</button>\n          </div>\n        </div>\n        <div className='board-generation'>\n          <div className='close-icon' onClick={this.props.togglePage}>&#10005;</div>\n          {this.state.showBoard &&\n            <>\n              <Board board={this.state.board} />\n              <div className='save-board'>\n                <input\n                  type='text'\n                  name='boardName'\n                  value={this.state.boardName}\n                  placeholder='Enter your name'\n                  onChange={this.handleNameChange}\n                />\n                <button onClick={this.saveBoard}>Save your board!</button>\n              </div>\n            </>\n          }\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { AllBoards } from './AllBoards'\nimport { CreateBoardForm } from './CreateBoardForm'\n\nexport class Home extends Component<{}, { showForm: boolean }> {\n  state = { showForm: false }\n\n  toggleShowForm = (): void => this.setState({ showForm: !this.state.showForm })\n\n  render() {\n    return (\n      <>\n        {!this.state.showForm && <AllBoards togglePage={this.toggleShowForm} /> }\n        {this.state.showForm && <CreateBoardForm togglePage={this.toggleShowForm} /> }\n      </>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport { Home } from './Home'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Home />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}